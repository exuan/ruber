// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UserHTTPServer interface {
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserRequest, error)
	SaveUser(context.Context, *SaveUserRequest) (*SaveUserReply, error)
	SetPassword(context.Context, *SetPasswordRequest) (*SetPasswordReply, error)
	User(context.Context, *UserRequest) (*UserReply, error)
	Users(context.Context, *UsersRequest) (*UsersReply, error)
	VerifyPassword(context.Context, *VerifyPasswordRequest) (*VerifyPasswordReply, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/users", _User_Users0_HTTP_Handler(srv))
	r.GET("/v1/user", _User_User0_HTTP_Handler(srv))
	r.POST("/v1/user/save", _User_SaveUser0_HTTP_Handler(srv))
	r.POST("/v1/user/delete", _User_DeleteUser0_HTTP_Handler(srv))
	r.POST("/v1/user/verifyPassword", _User_VerifyPassword0_HTTP_Handler(srv))
	r.POST("/v1/user/setPassword", _User_SetPassword0_HTTP_Handler(srv))
}

func _User_Users0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UsersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/Users")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Users(ctx, req.(*UsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UsersReply)
		return ctx.Result(200, reply)
	}
}

func _User_User0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/User")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.User(ctx, req.(*UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _User_SaveUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/SaveUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveUser(ctx, req.(*SaveUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveUserReply)
		return ctx.Result(200, reply)
	}
}

func _User_DeleteUser0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/DeleteUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserRequest)
		return ctx.Result(200, reply)
	}
}

func _User_VerifyPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/VerifyPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyPassword(ctx, req.(*VerifyPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyPasswordReply)
		return ctx.Result(200, reply)
	}
}

func _User_SetPassword0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/user.service.v1.User/SetPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetPassword(ctx, req.(*SetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetPasswordReply)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *DeleteUserRequest, err error)
	SaveUser(ctx context.Context, req *SaveUserRequest, opts ...http.CallOption) (rsp *SaveUserReply, err error)
	SetPassword(ctx context.Context, req *SetPasswordRequest, opts ...http.CallOption) (rsp *SetPasswordReply, err error)
	User(ctx context.Context, req *UserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
	Users(ctx context.Context, req *UsersRequest, opts ...http.CallOption) (rsp *UsersReply, err error)
	VerifyPassword(ctx context.Context, req *VerifyPasswordRequest, opts ...http.CallOption) (rsp *VerifyPasswordReply, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*DeleteUserRequest, error) {
	var out DeleteUserRequest
	pattern := "/v1/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.service.v1.User/DeleteUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SaveUser(ctx context.Context, in *SaveUserRequest, opts ...http.CallOption) (*SaveUserReply, error) {
	var out SaveUserReply
	pattern := "/v1/user/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.service.v1.User/SaveUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) SetPassword(ctx context.Context, in *SetPasswordRequest, opts ...http.CallOption) (*SetPasswordReply, error) {
	var out SetPasswordReply
	pattern := "/v1/user/setPassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.service.v1.User/SetPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) User(ctx context.Context, in *UserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.service.v1.User/User"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) Users(ctx context.Context, in *UsersRequest, opts ...http.CallOption) (*UsersReply, error) {
	var out UsersReply
	pattern := "/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/user.service.v1.User/Users"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserHTTPClientImpl) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...http.CallOption) (*VerifyPasswordReply, error) {
	var out VerifyPasswordReply
	pattern := "/v1/user/verifyPassword"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/user.service.v1.User/VerifyPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
