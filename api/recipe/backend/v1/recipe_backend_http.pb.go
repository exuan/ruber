// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	v1 "github.com/exuan/ruber/api/recipe/service/v1"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type BackendHTTPServer interface {
	DeleteRecipe(context.Context, *v1.DeleteRecipeRequest) (*v1.DeleteRecipeReply, error)
	DeleteRecipeCategory(context.Context, *v1.DeleteCategoryRequest) (*v1.DeleteCategoryReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	Recipe(context.Context, *v1.RecipeRequest) (*v1.RecipeReply, error)
	RecipeCategories(context.Context, *v1.CategoriesRequest) (*v1.CategoriesReply, error)
	RecipeCategory(context.Context, *v1.CategoryRequest) (*v1.CategoryReply, error)
	RecipeIndex(context.Context, *v1.IndexRequest) (*v1.IndexReply, error)
	Recipes(context.Context, *v1.RecipesRequest) (*v1.RecipesReply, error)
	SaveRecipe(context.Context, *v1.SaveRecipeRequest) (*v1.SaveRecipeReply, error)
	SaveRecipeCategory(context.Context, *v1.SaveCategoryRequest) (*v1.SaveCategoryReply, error)
	SaveRecipeIndex(context.Context, *v1.SaveIndexRequest) (*v1.SaveIndexReply, error)
	UploadUrl(context.Context, *UploadUrlRequest) (*UploadUrlReply, error)
	User(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterBackendHTTPServer(s *http.Server, srv BackendHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/login", _Backend_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _Backend_Logout0_HTTP_Handler(srv))
	r.GET("/v1/user", _Backend_User0_HTTP_Handler(srv))
	r.GET("/v1/recipe/index", _Backend_RecipeIndex0_HTTP_Handler(srv))
	r.POST("/v1/recipe/index/save", _Backend_SaveRecipeIndex0_HTTP_Handler(srv))
	r.GET("/v1/recipes", _Backend_Recipes0_HTTP_Handler(srv))
	r.GET("/v1/recipe", _Backend_Recipe0_HTTP_Handler(srv))
	r.POST("/v1/recipe/save", _Backend_SaveRecipe0_HTTP_Handler(srv))
	r.POST("/v1/recipe/delete", _Backend_DeleteRecipe0_HTTP_Handler(srv))
	r.GET("/v1/recipe/categories", _Backend_RecipeCategories0_HTTP_Handler(srv))
	r.GET("/v1/recipe/category", _Backend_RecipeCategory0_HTTP_Handler(srv))
	r.POST("/v1/recipe/category/save", _Backend_SaveRecipeCategory0_HTTP_Handler(srv))
	r.POST("/v1/recipe/category/delete", _Backend_DeleteRecipeCategory0_HTTP_Handler(srv))
	r.POST("/v1/uploadUrl", _Backend_UploadUrl0_HTTP_Handler(srv))
}

func _Backend_Login0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_Logout0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_User0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/User")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.User(ctx, req.(*UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_RecipeIndex0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.IndexRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/RecipeIndex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecipeIndex(ctx, req.(*v1.IndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.IndexReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_SaveRecipeIndex0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveIndexRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/SaveRecipeIndex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRecipeIndex(ctx, req.(*v1.SaveIndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SaveIndexReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_Recipes0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RecipesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/Recipes")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipes(ctx, req.(*v1.RecipesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RecipesReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_Recipe0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RecipeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/Recipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipe(ctx, req.(*v1.RecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_SaveRecipe0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveRecipeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/SaveRecipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRecipe(ctx, req.(*v1.SaveRecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SaveRecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_DeleteRecipe0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteRecipeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/DeleteRecipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRecipe(ctx, req.(*v1.DeleteRecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteRecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_RecipeCategories0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/RecipeCategories")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecipeCategories(ctx, req.(*v1.CategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CategoriesReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_RecipeCategory0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/RecipeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecipeCategory(ctx, req.(*v1.CategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_SaveRecipeCategory0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SaveCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/SaveRecipeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRecipeCategory(ctx, req.(*v1.SaveCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SaveCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_DeleteRecipeCategory0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/DeleteRecipeCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRecipeCategory(ctx, req.(*v1.DeleteCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Backend_UploadUrl0_HTTP_Handler(srv BackendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadUrlRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.backend.v1.Backend/UploadUrl")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadUrl(ctx, req.(*UploadUrlRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadUrlReply)
		return ctx.Result(200, reply)
	}
}

type BackendHTTPClient interface {
	DeleteRecipe(ctx context.Context, req *v1.DeleteRecipeRequest, opts ...http.CallOption) (rsp *v1.DeleteRecipeReply, err error)
	DeleteRecipeCategory(ctx context.Context, req *v1.DeleteCategoryRequest, opts ...http.CallOption) (rsp *v1.DeleteCategoryReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Recipe(ctx context.Context, req *v1.RecipeRequest, opts ...http.CallOption) (rsp *v1.RecipeReply, err error)
	RecipeCategories(ctx context.Context, req *v1.CategoriesRequest, opts ...http.CallOption) (rsp *v1.CategoriesReply, err error)
	RecipeCategory(ctx context.Context, req *v1.CategoryRequest, opts ...http.CallOption) (rsp *v1.CategoryReply, err error)
	RecipeIndex(ctx context.Context, req *v1.IndexRequest, opts ...http.CallOption) (rsp *v1.IndexReply, err error)
	Recipes(ctx context.Context, req *v1.RecipesRequest, opts ...http.CallOption) (rsp *v1.RecipesReply, err error)
	SaveRecipe(ctx context.Context, req *v1.SaveRecipeRequest, opts ...http.CallOption) (rsp *v1.SaveRecipeReply, err error)
	SaveRecipeCategory(ctx context.Context, req *v1.SaveCategoryRequest, opts ...http.CallOption) (rsp *v1.SaveCategoryReply, err error)
	SaveRecipeIndex(ctx context.Context, req *v1.SaveIndexRequest, opts ...http.CallOption) (rsp *v1.SaveIndexReply, err error)
	UploadUrl(ctx context.Context, req *UploadUrlRequest, opts ...http.CallOption) (rsp *UploadUrlReply, err error)
	User(ctx context.Context, req *UserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
}

type BackendHTTPClientImpl struct {
	cc *http.Client
}

func NewBackendHTTPClient(client *http.Client) BackendHTTPClient {
	return &BackendHTTPClientImpl{client}
}

func (c *BackendHTTPClientImpl) DeleteRecipe(ctx context.Context, in *v1.DeleteRecipeRequest, opts ...http.CallOption) (*v1.DeleteRecipeReply, error) {
	var out v1.DeleteRecipeReply
	pattern := "/v1/recipe/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/DeleteRecipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) DeleteRecipeCategory(ctx context.Context, in *v1.DeleteCategoryRequest, opts ...http.CallOption) (*v1.DeleteCategoryReply, error) {
	var out v1.DeleteCategoryReply
	pattern := "/v1/recipe/category/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/DeleteRecipeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) Recipe(ctx context.Context, in *v1.RecipeRequest, opts ...http.CallOption) (*v1.RecipeReply, error) {
	var out v1.RecipeReply
	pattern := "/v1/recipe"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/Recipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) RecipeCategories(ctx context.Context, in *v1.CategoriesRequest, opts ...http.CallOption) (*v1.CategoriesReply, error) {
	var out v1.CategoriesReply
	pattern := "/v1/recipe/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/RecipeCategories"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) RecipeCategory(ctx context.Context, in *v1.CategoryRequest, opts ...http.CallOption) (*v1.CategoryReply, error) {
	var out v1.CategoryReply
	pattern := "/v1/recipe/category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/RecipeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) RecipeIndex(ctx context.Context, in *v1.IndexRequest, opts ...http.CallOption) (*v1.IndexReply, error) {
	var out v1.IndexReply
	pattern := "/v1/recipe/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/RecipeIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) Recipes(ctx context.Context, in *v1.RecipesRequest, opts ...http.CallOption) (*v1.RecipesReply, error) {
	var out v1.RecipesReply
	pattern := "/v1/recipes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/Recipes"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) SaveRecipe(ctx context.Context, in *v1.SaveRecipeRequest, opts ...http.CallOption) (*v1.SaveRecipeReply, error) {
	var out v1.SaveRecipeReply
	pattern := "/v1/recipe/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/SaveRecipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) SaveRecipeCategory(ctx context.Context, in *v1.SaveCategoryRequest, opts ...http.CallOption) (*v1.SaveCategoryReply, error) {
	var out v1.SaveCategoryReply
	pattern := "/v1/recipe/category/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/SaveRecipeCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) SaveRecipeIndex(ctx context.Context, in *v1.SaveIndexRequest, opts ...http.CallOption) (*v1.SaveIndexReply, error) {
	var out v1.SaveIndexReply
	pattern := "/v1/recipe/index/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/SaveRecipeIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) UploadUrl(ctx context.Context, in *UploadUrlRequest, opts ...http.CallOption) (*UploadUrlReply, error) {
	var out UploadUrlReply
	pattern := "/v1/uploadUrl"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/UploadUrl"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BackendHTTPClientImpl) User(ctx context.Context, in *UserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.backend.v1.Backend/User"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
