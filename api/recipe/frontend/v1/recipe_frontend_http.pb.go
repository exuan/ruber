// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type FrontendHTTPServer interface {
	Index(context.Context, *IndexRequest) (*IndexReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	Recipe(context.Context, *RecipeRequest) (*RecipeReply, error)
	RecipeCategories(context.Context, *CategoriesRequest) (*CategoriesReply, error)
	Recipes(context.Context, *RecipesRequest) (*RecipesReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	SaveFavorites(context.Context, *SaveFavoritesRequest) (*SaveFavoritesReply, error)
	User(context.Context, *UserRequest) (*UserReply, error)
}

func RegisterFrontendHTTPServer(s *http.Server, srv FrontendHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/index", _Frontend_Index0_HTTP_Handler(srv))
	r.POST("/v1/register", _Frontend_Register0_HTTP_Handler(srv))
	r.POST("/v1/login", _Frontend_Login0_HTTP_Handler(srv))
	r.POST("/v1/logout", _Frontend_Logout0_HTTP_Handler(srv))
	r.GET("/v1/user", _Frontend_User0_HTTP_Handler(srv))
	r.GET("/v1/recipes", _Frontend_Recipes0_HTTP_Handler(srv))
	r.GET("/v1/recipe", _Frontend_Recipe0_HTTP_Handler(srv))
	r.GET("/v1/recipe/categories", _Frontend_RecipeCategories0_HTTP_Handler(srv))
	r.POST("/v1/recipe/favorites/save", _Frontend_SaveFavorites0_HTTP_Handler(srv))
}

func _Frontend_Index0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Index")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Index(ctx, req.(*IndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_Register0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_Login0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_Logout0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_User0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/User")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.User(ctx, req.(*UserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_Recipes0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecipesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Recipes")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipes(ctx, req.(*RecipesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecipesReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_Recipe0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecipeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/Recipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipe(ctx, req.(*RecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_RecipeCategories0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/RecipeCategories")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecipeCategories(ctx, req.(*CategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoriesReply)
		return ctx.Result(200, reply)
	}
}

func _Frontend_SaveFavorites0_HTTP_Handler(srv FrontendHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveFavoritesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.frontend.v1.frontend/SaveFavorites")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveFavorites(ctx, req.(*SaveFavoritesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveFavoritesReply)
		return ctx.Result(200, reply)
	}
}

type FrontendHTTPClient interface {
	Index(ctx context.Context, req *IndexRequest, opts ...http.CallOption) (rsp *IndexReply, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Recipe(ctx context.Context, req *RecipeRequest, opts ...http.CallOption) (rsp *RecipeReply, err error)
	RecipeCategories(ctx context.Context, req *CategoriesRequest, opts ...http.CallOption) (rsp *CategoriesReply, err error)
	Recipes(ctx context.Context, req *RecipesRequest, opts ...http.CallOption) (rsp *RecipesReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	SaveFavorites(ctx context.Context, req *SaveFavoritesRequest, opts ...http.CallOption) (rsp *SaveFavoritesReply, err error)
	User(ctx context.Context, req *UserRequest, opts ...http.CallOption) (rsp *UserReply, err error)
}

type FrontendHTTPClientImpl struct {
	cc *http.Client
}

func NewFrontendHTTPClient(client *http.Client) FrontendHTTPClient {
	return &FrontendHTTPClientImpl{client}
}

func (c *FrontendHTTPClientImpl) Index(ctx context.Context, in *IndexRequest, opts ...http.CallOption) (*IndexReply, error) {
	var out IndexReply
	pattern := "/v1/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Index"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) Recipe(ctx context.Context, in *RecipeRequest, opts ...http.CallOption) (*RecipeReply, error) {
	var out RecipeReply
	pattern := "/v1/recipe"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Recipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) RecipeCategories(ctx context.Context, in *CategoriesRequest, opts ...http.CallOption) (*CategoriesReply, error) {
	var out CategoriesReply
	pattern := "/v1/recipe/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/RecipeCategories"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) Recipes(ctx context.Context, in *RecipesRequest, opts ...http.CallOption) (*RecipesReply, error) {
	var out RecipesReply
	pattern := "/v1/recipes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Recipes"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) SaveFavorites(ctx context.Context, in *SaveFavoritesRequest, opts ...http.CallOption) (*SaveFavoritesReply, error) {
	var out SaveFavoritesReply
	pattern := "/v1/recipe/favorites/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/SaveFavorites"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FrontendHTTPClientImpl) User(ctx context.Context, in *UserRequest, opts ...http.CallOption) (*UserReply, error) {
	var out UserReply
	pattern := "/v1/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.frontend.v1.frontend/User"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
