// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecipeClient is the client API for Recipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeClient interface {
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexReply, error)
	SaveIndex(ctx context.Context, in *SaveIndexRequest, opts ...grpc.CallOption) (*SaveIndexReply, error)
	Recipes(ctx context.Context, in *RecipesRequest, opts ...grpc.CallOption) (*RecipesReply, error)
	Recipe(ctx context.Context, in *RecipeRequest, opts ...grpc.CallOption) (*RecipeReply, error)
	SaveRecipe(ctx context.Context, in *SaveRecipeRequest, opts ...grpc.CallOption) (*SaveRecipeReply, error)
	DeleteRecipe(ctx context.Context, in *DeleteRecipeRequest, opts ...grpc.CallOption) (*DeleteRecipeReply, error)
	Categories(ctx context.Context, in *CategoriesRequest, opts ...grpc.CallOption) (*CategoriesReply, error)
	Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryReply, error)
	SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryReply, error)
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error)
	Favorites(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesReply, error)
	Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*FavoriteReply, error)
	SaveFavorites(ctx context.Context, in *SaveFavoritesRequest, opts ...grpc.CallOption) (*SaveFavoritesReply, error)
}

type recipeClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeClient(cc grpc.ClientConnInterface) RecipeClient {
	return &recipeClient{cc}
}

func (c *recipeClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexReply, error) {
	out := new(IndexReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) SaveIndex(ctx context.Context, in *SaveIndexRequest, opts ...grpc.CallOption) (*SaveIndexReply, error) {
	out := new(SaveIndexReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/SaveIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Recipes(ctx context.Context, in *RecipesRequest, opts ...grpc.CallOption) (*RecipesReply, error) {
	out := new(RecipesReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Recipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Recipe(ctx context.Context, in *RecipeRequest, opts ...grpc.CallOption) (*RecipeReply, error) {
	out := new(RecipeReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Recipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) SaveRecipe(ctx context.Context, in *SaveRecipeRequest, opts ...grpc.CallOption) (*SaveRecipeReply, error) {
	out := new(SaveRecipeReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/SaveRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) DeleteRecipe(ctx context.Context, in *DeleteRecipeRequest, opts ...grpc.CallOption) (*DeleteRecipeReply, error) {
	out := new(DeleteRecipeReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/DeleteRecipe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Categories(ctx context.Context, in *CategoriesRequest, opts ...grpc.CallOption) (*CategoriesReply, error) {
	out := new(CategoriesReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Categories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Category(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryReply, error) {
	out := new(CategoryReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Category", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...grpc.CallOption) (*SaveCategoryReply, error) {
	out := new(SaveCategoryReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/SaveCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryReply, error) {
	out := new(DeleteCategoryReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/DeleteCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Favorites(ctx context.Context, in *FavoritesRequest, opts ...grpc.CallOption) (*FavoritesReply, error) {
	out := new(FavoritesReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Favorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*FavoriteReply, error) {
	out := new(FavoriteReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/Favorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeClient) SaveFavorites(ctx context.Context, in *SaveFavoritesRequest, opts ...grpc.CallOption) (*SaveFavoritesReply, error) {
	out := new(SaveFavoritesReply)
	err := c.cc.Invoke(ctx, "/recipe.service.v1.Recipe/SaveFavorites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeServer is the server API for Recipe service.
// All implementations must embed UnimplementedRecipeServer
// for forward compatibility
type RecipeServer interface {
	Index(context.Context, *IndexRequest) (*IndexReply, error)
	SaveIndex(context.Context, *SaveIndexRequest) (*SaveIndexReply, error)
	Recipes(context.Context, *RecipesRequest) (*RecipesReply, error)
	Recipe(context.Context, *RecipeRequest) (*RecipeReply, error)
	SaveRecipe(context.Context, *SaveRecipeRequest) (*SaveRecipeReply, error)
	DeleteRecipe(context.Context, *DeleteRecipeRequest) (*DeleteRecipeReply, error)
	Categories(context.Context, *CategoriesRequest) (*CategoriesReply, error)
	Category(context.Context, *CategoryRequest) (*CategoryReply, error)
	SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryReply, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error)
	Favorites(context.Context, *FavoritesRequest) (*FavoritesReply, error)
	Favorite(context.Context, *FavoriteRequest) (*FavoriteReply, error)
	SaveFavorites(context.Context, *SaveFavoritesRequest) (*SaveFavoritesReply, error)
	mustEmbedUnimplementedRecipeServer()
}

// UnimplementedRecipeServer must be embedded to have forward compatible implementations.
type UnimplementedRecipeServer struct {
}

func (UnimplementedRecipeServer) Index(context.Context, *IndexRequest) (*IndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedRecipeServer) SaveIndex(context.Context, *SaveIndexRequest) (*SaveIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveIndex not implemented")
}
func (UnimplementedRecipeServer) Recipes(context.Context, *RecipesRequest) (*RecipesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recipes not implemented")
}
func (UnimplementedRecipeServer) Recipe(context.Context, *RecipeRequest) (*RecipeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recipe not implemented")
}
func (UnimplementedRecipeServer) SaveRecipe(context.Context, *SaveRecipeRequest) (*SaveRecipeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRecipe not implemented")
}
func (UnimplementedRecipeServer) DeleteRecipe(context.Context, *DeleteRecipeRequest) (*DeleteRecipeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecipe not implemented")
}
func (UnimplementedRecipeServer) Categories(context.Context, *CategoriesRequest) (*CategoriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Categories not implemented")
}
func (UnimplementedRecipeServer) Category(context.Context, *CategoryRequest) (*CategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Category not implemented")
}
func (UnimplementedRecipeServer) SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCategory not implemented")
}
func (UnimplementedRecipeServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedRecipeServer) Favorites(context.Context, *FavoritesRequest) (*FavoritesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorites not implemented")
}
func (UnimplementedRecipeServer) Favorite(context.Context, *FavoriteRequest) (*FavoriteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedRecipeServer) SaveFavorites(context.Context, *SaveFavoritesRequest) (*SaveFavoritesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFavorites not implemented")
}
func (UnimplementedRecipeServer) mustEmbedUnimplementedRecipeServer() {}

// UnsafeRecipeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeServer will
// result in compilation errors.
type UnsafeRecipeServer interface {
	mustEmbedUnimplementedRecipeServer()
}

func RegisterRecipeServer(s grpc.ServiceRegistrar, srv RecipeServer) {
	s.RegisterService(&Recipe_ServiceDesc, srv)
}

func _Recipe_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_SaveIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).SaveIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/SaveIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).SaveIndex(ctx, req.(*SaveIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Recipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Recipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Recipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Recipes(ctx, req.(*RecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Recipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Recipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Recipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Recipe(ctx, req.(*RecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_SaveRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).SaveRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/SaveRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).SaveRecipe(ctx, req.(*SaveRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_DeleteRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).DeleteRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/DeleteRecipe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).DeleteRecipe(ctx, req.(*DeleteRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Categories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Categories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Categories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Categories(ctx, req.(*CategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Category_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Category(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Category",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Category(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_SaveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).SaveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/SaveCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).SaveCategory(ctx, req.(*SaveCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/DeleteCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Favorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Favorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Favorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Favorites(ctx, req.(*FavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/Favorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).Favorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recipe_SaveFavorites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFavoritesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeServer).SaveFavorites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recipe.service.v1.Recipe/SaveFavorites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeServer).SaveFavorites(ctx, req.(*SaveFavoritesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recipe_ServiceDesc is the grpc.ServiceDesc for Recipe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recipe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recipe.service.v1.Recipe",
	HandlerType: (*RecipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _Recipe_Index_Handler,
		},
		{
			MethodName: "SaveIndex",
			Handler:    _Recipe_SaveIndex_Handler,
		},
		{
			MethodName: "Recipes",
			Handler:    _Recipe_Recipes_Handler,
		},
		{
			MethodName: "Recipe",
			Handler:    _Recipe_Recipe_Handler,
		},
		{
			MethodName: "SaveRecipe",
			Handler:    _Recipe_SaveRecipe_Handler,
		},
		{
			MethodName: "DeleteRecipe",
			Handler:    _Recipe_DeleteRecipe_Handler,
		},
		{
			MethodName: "Categories",
			Handler:    _Recipe_Categories_Handler,
		},
		{
			MethodName: "Category",
			Handler:    _Recipe_Category_Handler,
		},
		{
			MethodName: "SaveCategory",
			Handler:    _Recipe_SaveCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _Recipe_DeleteCategory_Handler,
		},
		{
			MethodName: "Favorites",
			Handler:    _Recipe_Favorites_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _Recipe_Favorite_Handler,
		},
		{
			MethodName: "SaveFavorites",
			Handler:    _Recipe_SaveFavorites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/recipe_service.proto",
}
