// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.3

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type RecipeHTTPServer interface {
	Categories(context.Context, *CategoriesRequest) (*CategoriesReply, error)
	Category(context.Context, *CategoryRequest) (*CategoryReply, error)
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryReply, error)
	DeleteRecipe(context.Context, *DeleteRecipeRequest) (*DeleteRecipeReply, error)
	Favorite(context.Context, *FavoriteRequest) (*FavoriteReply, error)
	Favorites(context.Context, *FavoritesRequest) (*FavoritesReply, error)
	Index(context.Context, *IndexRequest) (*IndexReply, error)
	Recipe(context.Context, *RecipeRequest) (*RecipeReply, error)
	Recipes(context.Context, *RecipesRequest) (*RecipesReply, error)
	SaveCategory(context.Context, *SaveCategoryRequest) (*SaveCategoryReply, error)
	SaveFavorites(context.Context, *SaveFavoritesRequest) (*SaveFavoritesReply, error)
	SaveIndex(context.Context, *SaveIndexRequest) (*SaveIndexReply, error)
	SaveRecipe(context.Context, *SaveRecipeRequest) (*SaveRecipeReply, error)
}

func RegisterRecipeHTTPServer(s *http.Server, srv RecipeHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/index", _Recipe_Index0_HTTP_Handler(srv))
	r.POST("/v1/index/save", _Recipe_SaveIndex0_HTTP_Handler(srv))
	r.GET("/v1/recipes", _Recipe_Recipes0_HTTP_Handler(srv))
	r.GET("/v1/recipe", _Recipe_Recipe0_HTTP_Handler(srv))
	r.POST("/v1/recipe/save", _Recipe_SaveRecipe0_HTTP_Handler(srv))
	r.POST("/v1/recipe/delete", _Recipe_DeleteRecipe0_HTTP_Handler(srv))
	r.GET("/v1/categories", _Recipe_Categories0_HTTP_Handler(srv))
	r.GET("/v1/category", _Recipe_Category0_HTTP_Handler(srv))
	r.POST("/v1/category/save", _Recipe_SaveCategory0_HTTP_Handler(srv))
	r.POST("/v1/category/delete", _Recipe_DeleteCategory0_HTTP_Handler(srv))
	r.GET("/v1/favorites", _Recipe_Favorites0_HTTP_Handler(srv))
	r.GET("/v1/favorite", _Recipe_Favorite0_HTTP_Handler(srv))
	r.POST("/v1/favorites/save", _Recipe_SaveFavorites0_HTTP_Handler(srv))
}

func _Recipe_Index0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IndexRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Index")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Index(ctx, req.(*IndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IndexReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_SaveIndex0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveIndexRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/SaveIndex")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveIndex(ctx, req.(*SaveIndexRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveIndexReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Recipes0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecipesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Recipes")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipes(ctx, req.(*RecipesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecipesReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Recipe0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecipeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Recipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Recipe(ctx, req.(*RecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_SaveRecipe0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveRecipeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/SaveRecipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveRecipe(ctx, req.(*SaveRecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveRecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_DeleteRecipe0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRecipeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/DeleteRecipe")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRecipe(ctx, req.(*DeleteRecipeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRecipeReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Categories0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoriesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Categories")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Categories(ctx, req.(*CategoriesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoriesReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Category0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Category")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Category(ctx, req.(*CategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_SaveCategory0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/SaveCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveCategory(ctx, req.(*SaveCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_DeleteCategory0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteCategoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/DeleteCategory")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteCategory(ctx, req.(*DeleteCategoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteCategoryReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Favorites0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoritesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Favorites")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Favorites(ctx, req.(*FavoritesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoritesReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_Favorite0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FavoriteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/Favorite")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Favorite(ctx, req.(*FavoriteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FavoriteReply)
		return ctx.Result(200, reply)
	}
}

func _Recipe_SaveFavorites0_HTTP_Handler(srv RecipeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SaveFavoritesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/recipe.service.v1.Recipe/SaveFavorites")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SaveFavorites(ctx, req.(*SaveFavoritesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SaveFavoritesReply)
		return ctx.Result(200, reply)
	}
}

type RecipeHTTPClient interface {
	Categories(ctx context.Context, req *CategoriesRequest, opts ...http.CallOption) (rsp *CategoriesReply, err error)
	Category(ctx context.Context, req *CategoryRequest, opts ...http.CallOption) (rsp *CategoryReply, err error)
	DeleteCategory(ctx context.Context, req *DeleteCategoryRequest, opts ...http.CallOption) (rsp *DeleteCategoryReply, err error)
	DeleteRecipe(ctx context.Context, req *DeleteRecipeRequest, opts ...http.CallOption) (rsp *DeleteRecipeReply, err error)
	Favorite(ctx context.Context, req *FavoriteRequest, opts ...http.CallOption) (rsp *FavoriteReply, err error)
	Favorites(ctx context.Context, req *FavoritesRequest, opts ...http.CallOption) (rsp *FavoritesReply, err error)
	Index(ctx context.Context, req *IndexRequest, opts ...http.CallOption) (rsp *IndexReply, err error)
	Recipe(ctx context.Context, req *RecipeRequest, opts ...http.CallOption) (rsp *RecipeReply, err error)
	Recipes(ctx context.Context, req *RecipesRequest, opts ...http.CallOption) (rsp *RecipesReply, err error)
	SaveCategory(ctx context.Context, req *SaveCategoryRequest, opts ...http.CallOption) (rsp *SaveCategoryReply, err error)
	SaveFavorites(ctx context.Context, req *SaveFavoritesRequest, opts ...http.CallOption) (rsp *SaveFavoritesReply, err error)
	SaveIndex(ctx context.Context, req *SaveIndexRequest, opts ...http.CallOption) (rsp *SaveIndexReply, err error)
	SaveRecipe(ctx context.Context, req *SaveRecipeRequest, opts ...http.CallOption) (rsp *SaveRecipeReply, err error)
}

type RecipeHTTPClientImpl struct {
	cc *http.Client
}

func NewRecipeHTTPClient(client *http.Client) RecipeHTTPClient {
	return &RecipeHTTPClientImpl{client}
}

func (c *RecipeHTTPClientImpl) Categories(ctx context.Context, in *CategoriesRequest, opts ...http.CallOption) (*CategoriesReply, error) {
	var out CategoriesReply
	pattern := "/v1/categories"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Categories"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Category(ctx context.Context, in *CategoryRequest, opts ...http.CallOption) (*CategoryReply, error) {
	var out CategoryReply
	pattern := "/v1/category"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Category"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...http.CallOption) (*DeleteCategoryReply, error) {
	var out DeleteCategoryReply
	pattern := "/v1/category/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/DeleteCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) DeleteRecipe(ctx context.Context, in *DeleteRecipeRequest, opts ...http.CallOption) (*DeleteRecipeReply, error) {
	var out DeleteRecipeReply
	pattern := "/v1/recipe/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/DeleteRecipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Favorite(ctx context.Context, in *FavoriteRequest, opts ...http.CallOption) (*FavoriteReply, error) {
	var out FavoriteReply
	pattern := "/v1/favorite"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Favorite"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Favorites(ctx context.Context, in *FavoritesRequest, opts ...http.CallOption) (*FavoritesReply, error) {
	var out FavoritesReply
	pattern := "/v1/favorites"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Favorites"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Index(ctx context.Context, in *IndexRequest, opts ...http.CallOption) (*IndexReply, error) {
	var out IndexReply
	pattern := "/v1/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Index"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Recipe(ctx context.Context, in *RecipeRequest, opts ...http.CallOption) (*RecipeReply, error) {
	var out RecipeReply
	pattern := "/v1/recipe"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Recipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) Recipes(ctx context.Context, in *RecipesRequest, opts ...http.CallOption) (*RecipesReply, error) {
	var out RecipesReply
	pattern := "/v1/recipes"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/Recipes"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) SaveCategory(ctx context.Context, in *SaveCategoryRequest, opts ...http.CallOption) (*SaveCategoryReply, error) {
	var out SaveCategoryReply
	pattern := "/v1/category/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/SaveCategory"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) SaveFavorites(ctx context.Context, in *SaveFavoritesRequest, opts ...http.CallOption) (*SaveFavoritesReply, error) {
	var out SaveFavoritesReply
	pattern := "/v1/favorites/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/SaveFavorites"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) SaveIndex(ctx context.Context, in *SaveIndexRequest, opts ...http.CallOption) (*SaveIndexReply, error) {
	var out SaveIndexReply
	pattern := "/v1/index/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/SaveIndex"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RecipeHTTPClientImpl) SaveRecipe(ctx context.Context, in *SaveRecipeRequest, opts ...http.CallOption) (*SaveRecipeReply, error) {
	var out SaveRecipeReply
	pattern := "/v1/recipe/save"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/recipe.service.v1.Recipe/SaveRecipe"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
