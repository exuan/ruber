// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/exuan/ruber/app/recipe/backend/internal/biz"
	"github.com/exuan/ruber/app/recipe/backend/internal/conf"
	"github.com/exuan/ruber/app/recipe/backend/internal/server"
	"github.com/exuan/ruber/app/recipe/backend/internal/service"
	"github.com/exuan/ruber/pkg/provider"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, string2 string, redisConfig *provider.RedisConfig, attachmentConfig *provider.AttachmentConfig, logger log.Logger) (*kratos.App, func(), error) {
	discovery := provider.NewDiscovery(string2)
	recipeClient := provider.NewRecipeServiceClient(discovery)
	userClient := provider.NewUserServiceClient(discovery)
	client, cleanup, err := provider.NewRedis(redisConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	attachment, err := provider.NewAttachment(attachmentConfig)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	backend := biz.NewBackend(recipeClient, userClient, logger, client, attachment)
	backendService := service.NewBackendService(backend, logger)
	httpServer := server.NewHTTPServer(confServer, backendService, client, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
