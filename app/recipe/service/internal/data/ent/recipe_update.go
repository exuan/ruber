// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/exuan/ruber/app/recipe/service/internal/data/ent/predicate"
	"github.com/exuan/ruber/app/recipe/service/internal/data/ent/recipe"
)

// RecipeUpdate is the builder for updating Recipe entities.
type RecipeUpdate struct {
	config
	hooks    []Hook
	mutation *RecipeMutation
}

// Where appends a list predicates to the RecipeUpdate builder.
func (ru *RecipeUpdate) Where(ps ...predicate.Recipe) *RecipeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTitle sets the "title" field.
func (ru *RecipeUpdate) SetTitle(s string) *RecipeUpdate {
	ru.mutation.SetTitle(s)
	return ru
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableTitle(s *string) *RecipeUpdate {
	if s != nil {
		ru.SetTitle(*s)
	}
	return ru
}

// SetImage sets the "image" field.
func (ru *RecipeUpdate) SetImage(s string) *RecipeUpdate {
	ru.mutation.SetImage(s)
	return ru
}

// SetCategoryID sets the "category_id" field.
func (ru *RecipeUpdate) SetCategoryID(i int64) *RecipeUpdate {
	ru.mutation.ResetCategoryID()
	ru.mutation.SetCategoryID(i)
	return ru
}

// AddCategoryID adds i to the "category_id" field.
func (ru *RecipeUpdate) AddCategoryID(i int64) *RecipeUpdate {
	ru.mutation.AddCategoryID(i)
	return ru
}

// SetWeight sets the "weight" field.
func (ru *RecipeUpdate) SetWeight(i int64) *RecipeUpdate {
	ru.mutation.ResetWeight()
	ru.mutation.SetWeight(i)
	return ru
}

// AddWeight adds i to the "weight" field.
func (ru *RecipeUpdate) AddWeight(i int64) *RecipeUpdate {
	ru.mutation.AddWeight(i)
	return ru
}

// SetSort sets the "sort" field.
func (ru *RecipeUpdate) SetSort(i int64) *RecipeUpdate {
	ru.mutation.ResetSort()
	ru.mutation.SetSort(i)
	return ru
}

// AddSort adds i to the "sort" field.
func (ru *RecipeUpdate) AddSort(i int64) *RecipeUpdate {
	ru.mutation.AddSort(i)
	return ru
}

// SetFavorites sets the "favorites" field.
func (ru *RecipeUpdate) SetFavorites(i int64) *RecipeUpdate {
	ru.mutation.ResetFavorites()
	ru.mutation.SetFavorites(i)
	return ru
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableFavorites(i *int64) *RecipeUpdate {
	if i != nil {
		ru.SetFavorites(*i)
	}
	return ru
}

// AddFavorites adds i to the "favorites" field.
func (ru *RecipeUpdate) AddFavorites(i int64) *RecipeUpdate {
	ru.mutation.AddFavorites(i)
	return ru
}

// ClearFavorites clears the value of the "favorites" field.
func (ru *RecipeUpdate) ClearFavorites() *RecipeUpdate {
	ru.mutation.ClearFavorites()
	return ru
}

// SetContent sets the "content" field.
func (ru *RecipeUpdate) SetContent(s string) *RecipeUpdate {
	ru.mutation.SetContent(s)
	return ru
}

// SetStatus sets the "status" field.
func (ru *RecipeUpdate) SetStatus(i int) *RecipeUpdate {
	ru.mutation.ResetStatus()
	ru.mutation.SetStatus(i)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableStatus(i *int) *RecipeUpdate {
	if i != nil {
		ru.SetStatus(*i)
	}
	return ru
}

// AddStatus adds i to the "status" field.
func (ru *RecipeUpdate) AddStatus(i int) *RecipeUpdate {
	ru.mutation.AddStatus(i)
	return ru
}

// SetModifier sets the "modifier" field.
func (ru *RecipeUpdate) SetModifier(s string) *RecipeUpdate {
	ru.mutation.SetModifier(s)
	return ru
}

// SetUpdateTime sets the "update_time" field.
func (ru *RecipeUpdate) SetUpdateTime(i int64) *RecipeUpdate {
	ru.mutation.ResetUpdateTime()
	ru.mutation.SetUpdateTime(i)
	return ru
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ru *RecipeUpdate) SetNillableUpdateTime(i *int64) *RecipeUpdate {
	if i != nil {
		ru.SetUpdateTime(*i)
	}
	return ru
}

// AddUpdateTime adds i to the "update_time" field.
func (ru *RecipeUpdate) AddUpdateTime(i int64) *RecipeUpdate {
	ru.mutation.AddUpdateTime(i)
	return ru
}

// Mutation returns the RecipeMutation object of the builder.
func (ru *RecipeUpdate) Mutation() *RecipeMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecipeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecipeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecipeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecipeUpdate) check() error {
	if v, ok := ru.mutation.UpdateTime(); ok {
		if err := recipe.UpdateTimeValidator(v); err != nil {
			return &ValidationError{Name: "update_time", err: fmt.Errorf("ent: validator failed for field \"update_time\": %w", err)}
		}
	}
	return nil
}

func (ru *RecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recipe.Table,
			Columns: recipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: recipe.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldTitle,
		})
	}
	if value, ok := ru.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldImage,
		})
	}
	if value, ok := ru.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldCategoryID,
		})
	}
	if value, ok := ru.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldCategoryID,
		})
	}
	if value, ok := ru.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldWeight,
		})
	}
	if value, ok := ru.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldWeight,
		})
	}
	if value, ok := ru.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldSort,
		})
	}
	if value, ok := ru.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldSort,
		})
	}
	if value, ok := ru.mutation.Favorites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldFavorites,
		})
	}
	if value, ok := ru.mutation.AddedFavorites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldFavorites,
		})
	}
	if ru.mutation.FavoritesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: recipe.FieldFavorites,
		})
	}
	if value, ok := ru.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldContent,
		})
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldStatus,
		})
	}
	if value, ok := ru.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldStatus,
		})
	}
	if value, ok := ru.mutation.Modifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldModifier,
		})
	}
	if value, ok := ru.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldUpdateTime,
		})
	}
	if value, ok := ru.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RecipeUpdateOne is the builder for updating a single Recipe entity.
type RecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecipeMutation
}

// SetTitle sets the "title" field.
func (ruo *RecipeUpdateOne) SetTitle(s string) *RecipeUpdateOne {
	ruo.mutation.SetTitle(s)
	return ruo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableTitle(s *string) *RecipeUpdateOne {
	if s != nil {
		ruo.SetTitle(*s)
	}
	return ruo
}

// SetImage sets the "image" field.
func (ruo *RecipeUpdateOne) SetImage(s string) *RecipeUpdateOne {
	ruo.mutation.SetImage(s)
	return ruo
}

// SetCategoryID sets the "category_id" field.
func (ruo *RecipeUpdateOne) SetCategoryID(i int64) *RecipeUpdateOne {
	ruo.mutation.ResetCategoryID()
	ruo.mutation.SetCategoryID(i)
	return ruo
}

// AddCategoryID adds i to the "category_id" field.
func (ruo *RecipeUpdateOne) AddCategoryID(i int64) *RecipeUpdateOne {
	ruo.mutation.AddCategoryID(i)
	return ruo
}

// SetWeight sets the "weight" field.
func (ruo *RecipeUpdateOne) SetWeight(i int64) *RecipeUpdateOne {
	ruo.mutation.ResetWeight()
	ruo.mutation.SetWeight(i)
	return ruo
}

// AddWeight adds i to the "weight" field.
func (ruo *RecipeUpdateOne) AddWeight(i int64) *RecipeUpdateOne {
	ruo.mutation.AddWeight(i)
	return ruo
}

// SetSort sets the "sort" field.
func (ruo *RecipeUpdateOne) SetSort(i int64) *RecipeUpdateOne {
	ruo.mutation.ResetSort()
	ruo.mutation.SetSort(i)
	return ruo
}

// AddSort adds i to the "sort" field.
func (ruo *RecipeUpdateOne) AddSort(i int64) *RecipeUpdateOne {
	ruo.mutation.AddSort(i)
	return ruo
}

// SetFavorites sets the "favorites" field.
func (ruo *RecipeUpdateOne) SetFavorites(i int64) *RecipeUpdateOne {
	ruo.mutation.ResetFavorites()
	ruo.mutation.SetFavorites(i)
	return ruo
}

// SetNillableFavorites sets the "favorites" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableFavorites(i *int64) *RecipeUpdateOne {
	if i != nil {
		ruo.SetFavorites(*i)
	}
	return ruo
}

// AddFavorites adds i to the "favorites" field.
func (ruo *RecipeUpdateOne) AddFavorites(i int64) *RecipeUpdateOne {
	ruo.mutation.AddFavorites(i)
	return ruo
}

// ClearFavorites clears the value of the "favorites" field.
func (ruo *RecipeUpdateOne) ClearFavorites() *RecipeUpdateOne {
	ruo.mutation.ClearFavorites()
	return ruo
}

// SetContent sets the "content" field.
func (ruo *RecipeUpdateOne) SetContent(s string) *RecipeUpdateOne {
	ruo.mutation.SetContent(s)
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RecipeUpdateOne) SetStatus(i int) *RecipeUpdateOne {
	ruo.mutation.ResetStatus()
	ruo.mutation.SetStatus(i)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableStatus(i *int) *RecipeUpdateOne {
	if i != nil {
		ruo.SetStatus(*i)
	}
	return ruo
}

// AddStatus adds i to the "status" field.
func (ruo *RecipeUpdateOne) AddStatus(i int) *RecipeUpdateOne {
	ruo.mutation.AddStatus(i)
	return ruo
}

// SetModifier sets the "modifier" field.
func (ruo *RecipeUpdateOne) SetModifier(s string) *RecipeUpdateOne {
	ruo.mutation.SetModifier(s)
	return ruo
}

// SetUpdateTime sets the "update_time" field.
func (ruo *RecipeUpdateOne) SetUpdateTime(i int64) *RecipeUpdateOne {
	ruo.mutation.ResetUpdateTime()
	ruo.mutation.SetUpdateTime(i)
	return ruo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ruo *RecipeUpdateOne) SetNillableUpdateTime(i *int64) *RecipeUpdateOne {
	if i != nil {
		ruo.SetUpdateTime(*i)
	}
	return ruo
}

// AddUpdateTime adds i to the "update_time" field.
func (ruo *RecipeUpdateOne) AddUpdateTime(i int64) *RecipeUpdateOne {
	ruo.mutation.AddUpdateTime(i)
	return ruo
}

// Mutation returns the RecipeMutation object of the builder.
func (ruo *RecipeUpdateOne) Mutation() *RecipeMutation {
	return ruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecipeUpdateOne) Select(field string, fields ...string) *RecipeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recipe entity.
func (ruo *RecipeUpdateOne) Save(ctx context.Context) (*Recipe, error) {
	var (
		err  error
		node *Recipe
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecipeUpdateOne) SaveX(ctx context.Context) *Recipe {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecipeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecipeUpdateOne) check() error {
	if v, ok := ruo.mutation.UpdateTime(); ok {
		if err := recipe.UpdateTimeValidator(v); err != nil {
			return &ValidationError{Name: "update_time", err: fmt.Errorf("ent: validator failed for field \"update_time\": %w", err)}
		}
	}
	return nil
}

func (ruo *RecipeUpdateOne) sqlSave(ctx context.Context) (_node *Recipe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recipe.Table,
			Columns: recipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: recipe.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Recipe.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipe.FieldID)
		for _, f := range fields {
			if !recipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldTitle,
		})
	}
	if value, ok := ruo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldImage,
		})
	}
	if value, ok := ruo.mutation.CategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldCategoryID,
		})
	}
	if value, ok := ruo.mutation.AddedCategoryID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldCategoryID,
		})
	}
	if value, ok := ruo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldWeight,
		})
	}
	if value, ok := ruo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldWeight,
		})
	}
	if value, ok := ruo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldSort,
		})
	}
	if value, ok := ruo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldSort,
		})
	}
	if value, ok := ruo.mutation.Favorites(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldFavorites,
		})
	}
	if value, ok := ruo.mutation.AddedFavorites(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldFavorites,
		})
	}
	if ruo.mutation.FavoritesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: recipe.FieldFavorites,
		})
	}
	if value, ok := ruo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldContent,
		})
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldStatus,
		})
	}
	if value, ok := ruo.mutation.Modifier(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldModifier,
		})
	}
	if value, ok := ruo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldUpdateTime,
		})
	}
	if value, ok := ruo.mutation.AddedUpdateTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: recipe.FieldUpdateTime,
		})
	}
	_node = &Recipe{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
