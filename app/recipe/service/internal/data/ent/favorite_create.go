// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/exuan/ruber/app/recipe/service/internal/data/ent/favorite"
)

// FavoriteCreate is the builder for creating a Favorite entity.
type FavoriteCreate struct {
	config
	mutation *FavoriteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUserID sets the "user_id" field.
func (fc *FavoriteCreate) SetUserID(s string) *FavoriteCreate {
	fc.mutation.SetUserID(s)
	return fc
}

// SetRecipeID sets the "recipe_id" field.
func (fc *FavoriteCreate) SetRecipeID(i int64) *FavoriteCreate {
	fc.mutation.SetRecipeID(i)
	return fc
}

// SetCreateTime sets the "create_time" field.
func (fc *FavoriteCreate) SetCreateTime(i int64) *FavoriteCreate {
	fc.mutation.SetCreateTime(i)
	return fc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (fc *FavoriteCreate) SetNillableCreateTime(i *int64) *FavoriteCreate {
	if i != nil {
		fc.SetCreateTime(*i)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FavoriteCreate) SetID(i int64) *FavoriteCreate {
	fc.mutation.SetID(i)
	return fc
}

// Mutation returns the FavoriteMutation object of the builder.
func (fc *FavoriteCreate) Mutation() *FavoriteMutation {
	return fc.mutation
}

// Save creates the Favorite in the database.
func (fc *FavoriteCreate) Save(ctx context.Context) (*Favorite, error) {
	var (
		err  error
		node *Favorite
	)
	fc.defaults()
	if len(fc.hooks) == 0 {
		if err = fc.check(); err != nil {
			return nil, err
		}
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FavoriteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fc.check(); err != nil {
				return nil, err
			}
			fc.mutation = mutation
			if node, err = fc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			if fc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FavoriteCreate) SaveX(ctx context.Context) *Favorite {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FavoriteCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FavoriteCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FavoriteCreate) defaults() {
	if _, ok := fc.mutation.CreateTime(); !ok {
		v := favorite.DefaultCreateTime()
		fc.mutation.SetCreateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FavoriteCreate) check() error {
	if _, ok := fc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := fc.mutation.RecipeID(); !ok {
		return &ValidationError{Name: "recipe_id", err: errors.New(`ent: missing required field "recipe_id"`)}
	}
	if _, ok := fc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "create_time"`)}
	}
	return nil
}

func (fc *FavoriteCreate) sqlSave(ctx context.Context) (*Favorite, error) {
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (fc *FavoriteCreate) createSpec() (*Favorite, *sqlgraph.CreateSpec) {
	var (
		_node = &Favorite{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: favorite.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: favorite.FieldID,
			},
		}
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: favorite.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := fc.mutation.RecipeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: favorite.FieldRecipeID,
		})
		_node.RecipeID = value
	}
	if value, ok := fc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: favorite.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Favorite.Create().
//		SetUserID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FavoriteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (fc *FavoriteCreate) OnConflict(opts ...sql.ConflictOption) *FavoriteUpsertOne {
	fc.conflict = opts
	return &FavoriteUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Favorite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fc *FavoriteCreate) OnConflictColumns(columns ...string) *FavoriteUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FavoriteUpsertOne{
		create: fc,
	}
}

type (
	// FavoriteUpsertOne is the builder for "upsert"-ing
	//  one Favorite node.
	FavoriteUpsertOne struct {
		create *FavoriteCreate
	}

	// FavoriteUpsert is the "OnConflict" setter.
	FavoriteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUserID sets the "user_id" field.
func (u *FavoriteUpsert) SetUserID(v string) *FavoriteUpsert {
	u.Set(favorite.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FavoriteUpsert) UpdateUserID() *FavoriteUpsert {
	u.SetExcluded(favorite.FieldUserID)
	return u
}

// SetRecipeID sets the "recipe_id" field.
func (u *FavoriteUpsert) SetRecipeID(v int64) *FavoriteUpsert {
	u.Set(favorite.FieldRecipeID, v)
	return u
}

// UpdateRecipeID sets the "recipe_id" field to the value that was provided on create.
func (u *FavoriteUpsert) UpdateRecipeID() *FavoriteUpsert {
	u.SetExcluded(favorite.FieldRecipeID)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *FavoriteUpsert) SetCreateTime(v int64) *FavoriteUpsert {
	u.Set(favorite.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *FavoriteUpsert) UpdateCreateTime() *FavoriteUpsert {
	u.SetExcluded(favorite.FieldCreateTime)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Favorite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(favorite.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FavoriteUpsertOne) UpdateNewValues() *FavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(favorite.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Favorite.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FavoriteUpsertOne) Ignore() *FavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FavoriteUpsertOne) DoNothing() *FavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FavoriteCreate.OnConflict
// documentation for more info.
func (u *FavoriteUpsertOne) Update(set func(*FavoriteUpsert)) *FavoriteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FavoriteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *FavoriteUpsertOne) SetUserID(v string) *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FavoriteUpsertOne) UpdateUserID() *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateUserID()
	})
}

// SetRecipeID sets the "recipe_id" field.
func (u *FavoriteUpsertOne) SetRecipeID(v int64) *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetRecipeID(v)
	})
}

// UpdateRecipeID sets the "recipe_id" field to the value that was provided on create.
func (u *FavoriteUpsertOne) UpdateRecipeID() *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateRecipeID()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *FavoriteUpsertOne) SetCreateTime(v int64) *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *FavoriteUpsertOne) UpdateCreateTime() *FavoriteUpsertOne {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateCreateTime()
	})
}

// Exec executes the query.
func (u *FavoriteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FavoriteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FavoriteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FavoriteUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FavoriteUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FavoriteCreateBulk is the builder for creating many Favorite entities in bulk.
type FavoriteCreateBulk struct {
	config
	builders []*FavoriteCreate
	conflict []sql.ConflictOption
}

// Save creates the Favorite entities in the database.
func (fcb *FavoriteCreateBulk) Save(ctx context.Context) ([]*Favorite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Favorite, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) SaveX(ctx context.Context) []*Favorite {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FavoriteCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FavoriteCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Favorite.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FavoriteUpsert) {
//			SetUserID(v+v).
//		}).
//		Exec(ctx)
//
func (fcb *FavoriteCreateBulk) OnConflict(opts ...sql.ConflictOption) *FavoriteUpsertBulk {
	fcb.conflict = opts
	return &FavoriteUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Favorite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fcb *FavoriteCreateBulk) OnConflictColumns(columns ...string) *FavoriteUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FavoriteUpsertBulk{
		create: fcb,
	}
}

// FavoriteUpsertBulk is the builder for "upsert"-ing
// a bulk of Favorite nodes.
type FavoriteUpsertBulk struct {
	create *FavoriteCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Favorite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(favorite.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FavoriteUpsertBulk) UpdateNewValues() *FavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(favorite.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Favorite.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FavoriteUpsertBulk) Ignore() *FavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FavoriteUpsertBulk) DoNothing() *FavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FavoriteCreateBulk.OnConflict
// documentation for more info.
func (u *FavoriteUpsertBulk) Update(set func(*FavoriteUpsert)) *FavoriteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FavoriteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUserID sets the "user_id" field.
func (u *FavoriteUpsertBulk) SetUserID(v string) *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *FavoriteUpsertBulk) UpdateUserID() *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateUserID()
	})
}

// SetRecipeID sets the "recipe_id" field.
func (u *FavoriteUpsertBulk) SetRecipeID(v int64) *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetRecipeID(v)
	})
}

// UpdateRecipeID sets the "recipe_id" field to the value that was provided on create.
func (u *FavoriteUpsertBulk) UpdateRecipeID() *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateRecipeID()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *FavoriteUpsertBulk) SetCreateTime(v int64) *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *FavoriteUpsertBulk) UpdateCreateTime() *FavoriteUpsertBulk {
	return u.Update(func(s *FavoriteUpsert) {
		s.UpdateCreateTime()
	})
}

// Exec executes the query.
func (u *FavoriteUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FavoriteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FavoriteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FavoriteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
